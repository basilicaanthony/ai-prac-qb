class TicTacToe:
    def __init__(self):
        self.board = [[' ' for _ in range(3)] for _ in range(3)]
        self.player = 'X'
        self.computer = 'O'
        self.empty_cell = ' '

    def print_board(self):
        for row in self.board:
            print('|'.join(row))
            print('-' * 5)

    def is_winner(self, player):
        for row in self.board:
            if row[0] == row[1] == row[2] == player:
                return True
        for col in range(3):
            if self.board[0][col] == self.board[1][col] == self.board[2][col] == player:
                return True
        if self.board[0][0] == self.board[1][1] == self.board[2][2] == player:
            return True
        if self.board[0][2] == self.board[1][1] == self.board[2][0] == player:
            return True
        return False

    def is_board_full(self):
        for row in self.board:
            if self.empty_cell in row:
                return False
        return True

    def is_game_over(self):
        return self.is_winner(self.player) or self.is_winner(self.computer) or self.is_board_full()

    def get_empty_cells(self):
        empty_cells = []
        for i in range(3):
            for j in range(3):
                if self.board[i][j] == self.empty_cell:
                    empty_cells.append((i, j))
        return empty_cells

    def make_move(self, player, row, col):
        self.board[row][col] = player

    def undo_move(self, row, col):
        self.board[row][col] = self.empty_cell

    def get_score(self):
        if self.is_winner(self.player):
            return 10
        elif self.is_winner(self.computer):
            return -10
        else:
            return 0

    def minimax(self, depth, maximizing_player, alpha, beta):
        if self.is_winner(self.player):
            return 10 - depth
        elif self.is_winner(self.computer):
            return depth - 10
        elif self.is_board_full():
            return 0

        if maximizing_player:
            max_eval = float('-inf')
            for i in range(3):
                for j in range(3):
                    if self.board[i][j] == self.empty_cell:
                        self.board[i][j] = self.player
                        eval = self.minimax(depth + 1, False, alpha, beta)
                        self.undo_move(i, j)
                        max_eval = max(max_eval, eval)
                        alpha = max(alpha, eval)
                        if beta <= alpha:
                            break
            return max_eval
        else:
            min_eval = float('inf')
            for i in range(3):
                for j in range(3):
                    if self.board[i][j] == self.empty_cell:
                        self.board[i][j] = self.computer
                        eval = self.minimax(depth + 1, True, alpha, beta)
                        self.undo_move(i, j)
                        min_eval = min(min_eval, eval)
                        beta = min(beta, eval)
                        if beta <= alpha:
                            break
            return min_eval

    def get_best_move(self):
        best_eval = float('-inf')
        best_move = None
        for i in range(3):
            for j in range(3):
                if self.board[i][j] == self.empty_cell:
                    self.board[i][j] = self.player
                    eval = self.minimax(0, False, float('-inf'), float('inf'))
                    self.undo_move(i, j)
                    if eval > best_eval:
                        best_eval = eval
                        best_move = (i, j)
        return best_move

if __name__ == "__main__":
    game = TicTacToe()
    print("Welcome to Tic Tac Toe!")
    while not game.is_game_over():
        game.print_board()
        if game.player == 'X':
            row, col = map(int, input("Enter row and column (1-3): ").split())
            game.make_move(game.player, row - 1, col - 1)
        else:
            print("Computer's turn...")
            row, col = game.get_best_move()
            game.make_move(game.computer, row, col)
        if game.is_winner(game.player):
            game.print_board()
            print("Congratulations! You win!")
            break
        elif game.is_winner(game.computer):
            game.print_board()
            print("Computer wins!")
            break
        elif game.is_board_full():
            game.print_board()
            print("It's a draw!")
            break
        game.player = 'O' if game.player == 'X' else 'X'
